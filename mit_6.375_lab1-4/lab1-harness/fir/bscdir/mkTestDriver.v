//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Fri Nov 11 22:09:17 PST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestDriver(CLK,
		    RST_N);
  input  CLK;
  input  RST_N;

  // register m_doneread
  reg m_doneread;
  wire m_doneread$D_IN, m_doneread$EN;

  // register m_in
  reg [31 : 0] m_in;
  wire [31 : 0] m_in$D_IN;
  wire m_in$EN;

  // register m_inited
  reg m_inited;
  wire m_inited$D_IN, m_inited$EN;

  // register m_out
  reg [31 : 0] m_out;
  wire [31 : 0] m_out$D_IN;
  wire m_out$EN;

  // register pipeline_r_0
  reg [15 : 0] pipeline_r_0;
  wire [15 : 0] pipeline_r_0$D_IN;
  wire pipeline_r_0$EN;

  // register pipeline_r_1
  reg [15 : 0] pipeline_r_1;
  wire [15 : 0] pipeline_r_1$D_IN;
  wire pipeline_r_1$EN;

  // register pipeline_r_2
  reg [15 : 0] pipeline_r_2;
  wire [15 : 0] pipeline_r_2$D_IN;
  wire pipeline_r_2$EN;

  // register pipeline_r_3
  reg [15 : 0] pipeline_r_3;
  wire [15 : 0] pipeline_r_3$D_IN;
  wire pipeline_r_3$EN;

  // register pipeline_r_4
  reg [15 : 0] pipeline_r_4;
  wire [15 : 0] pipeline_r_4$D_IN;
  wire pipeline_r_4$EN;

  // register pipeline_r_5
  reg [15 : 0] pipeline_r_5;
  wire [15 : 0] pipeline_r_5$D_IN;
  wire pipeline_r_5$EN;

  // register pipeline_r_6
  reg [15 : 0] pipeline_r_6;
  wire [15 : 0] pipeline_r_6$D_IN;
  wire pipeline_r_6$EN;

  // register pipeline_r_7
  reg [15 : 0] pipeline_r_7;
  wire [15 : 0] pipeline_r_7$D_IN;
  wire pipeline_r_7$EN;

  // ports of submodule m_outstanding
  wire [31 : 0] m_outstanding$DATA_A,
		m_outstanding$DATA_B,
		m_outstanding$DATA_C,
		m_outstanding$DATA_F,
		m_outstanding$Q_OUT;
  wire m_outstanding$ADDA,
       m_outstanding$ADDB,
       m_outstanding$SETC,
       m_outstanding$SETF;

  // ports of submodule pipeline_infifo
  wire [15 : 0] pipeline_infifo$D_IN, pipeline_infifo$D_OUT;
  wire pipeline_infifo$CLR,
       pipeline_infifo$DEQ,
       pipeline_infifo$EMPTY_N,
       pipeline_infifo$ENQ,
       pipeline_infifo$FULL_N;

  // ports of submodule pipeline_m_0
  wire [31 : 0] pipeline_m_0$getResult, pipeline_m_0$putOperands_coeff;
  wire [15 : 0] pipeline_m_0$putOperands_samp;
  wire pipeline_m_0$EN_getResult,
       pipeline_m_0$EN_putOperands,
       pipeline_m_0$RDY_getResult,
       pipeline_m_0$RDY_putOperands;

  // ports of submodule pipeline_m_1
  wire [31 : 0] pipeline_m_1$getResult, pipeline_m_1$putOperands_coeff;
  wire [15 : 0] pipeline_m_1$putOperands_samp;
  wire pipeline_m_1$EN_getResult,
       pipeline_m_1$EN_putOperands,
       pipeline_m_1$RDY_getResult,
       pipeline_m_1$RDY_putOperands;

  // ports of submodule pipeline_m_2
  wire [31 : 0] pipeline_m_2$getResult, pipeline_m_2$putOperands_coeff;
  wire [15 : 0] pipeline_m_2$putOperands_samp;
  wire pipeline_m_2$EN_getResult,
       pipeline_m_2$EN_putOperands,
       pipeline_m_2$RDY_getResult,
       pipeline_m_2$RDY_putOperands;

  // ports of submodule pipeline_m_3
  wire [31 : 0] pipeline_m_3$getResult, pipeline_m_3$putOperands_coeff;
  wire [15 : 0] pipeline_m_3$putOperands_samp;
  wire pipeline_m_3$EN_getResult,
       pipeline_m_3$EN_putOperands,
       pipeline_m_3$RDY_getResult,
       pipeline_m_3$RDY_putOperands;

  // ports of submodule pipeline_m_4
  wire [31 : 0] pipeline_m_4$getResult, pipeline_m_4$putOperands_coeff;
  wire [15 : 0] pipeline_m_4$putOperands_samp;
  wire pipeline_m_4$EN_getResult,
       pipeline_m_4$EN_putOperands,
       pipeline_m_4$RDY_getResult,
       pipeline_m_4$RDY_putOperands;

  // ports of submodule pipeline_m_5
  wire [31 : 0] pipeline_m_5$getResult, pipeline_m_5$putOperands_coeff;
  wire [15 : 0] pipeline_m_5$putOperands_samp;
  wire pipeline_m_5$EN_getResult,
       pipeline_m_5$EN_putOperands,
       pipeline_m_5$RDY_getResult,
       pipeline_m_5$RDY_putOperands;

  // ports of submodule pipeline_m_6
  wire [31 : 0] pipeline_m_6$getResult, pipeline_m_6$putOperands_coeff;
  wire [15 : 0] pipeline_m_6$putOperands_samp;
  wire pipeline_m_6$EN_getResult,
       pipeline_m_6$EN_putOperands,
       pipeline_m_6$RDY_getResult,
       pipeline_m_6$RDY_putOperands;

  // ports of submodule pipeline_m_7
  wire [31 : 0] pipeline_m_7$getResult, pipeline_m_7$putOperands_coeff;
  wire [15 : 0] pipeline_m_7$putOperands_samp;
  wire pipeline_m_7$EN_getResult,
       pipeline_m_7$EN_putOperands,
       pipeline_m_7$RDY_getResult,
       pipeline_m_7$RDY_putOperands;

  // ports of submodule pipeline_m_8
  wire [31 : 0] pipeline_m_8$getResult, pipeline_m_8$putOperands_coeff;
  wire [15 : 0] pipeline_m_8$putOperands_samp;
  wire pipeline_m_8$EN_getResult,
       pipeline_m_8$EN_putOperands,
       pipeline_m_8$RDY_getResult,
       pipeline_m_8$RDY_putOperands;

  // ports of submodule pipeline_outfifo
  wire [15 : 0] pipeline_outfifo$D_IN, pipeline_outfifo$D_OUT;
  wire pipeline_outfifo$CLR,
       pipeline_outfifo$DEQ,
       pipeline_outfifo$EMPTY_N,
       pipeline_outfifo$ENQ,
       pipeline_outfifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_finish,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_pipeline_add,
       CAN_FIRE_RL_pipeline_mult,
       CAN_FIRE_RL_read,
       CAN_FIRE_RL_write,
       WILL_FIRE_RL_finish,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_pipeline_add,
       WILL_FIRE_RL_pipeline_mult,
       WILL_FIRE_RL_read,
       WILL_FIRE_RL_write;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] x__h7444;
  reg [31 : 0] b__h7293;
  reg [31 : 0] TASK_fopen___d68;
  reg [31 : 0] TASK_fopen___d70;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] x__h6115,
		x__h6139,
		x__h6163,
		x__h6187,
		x__h6211,
		x__h6235,
		x__h6259,
		x__h6283;
  wire pipeline_m_3_RDY_getResult__2_AND_pipeline_m_4_ETC___d44,
       pipeline_m_3_RDY_putOperands_AND_pipeline_m_4__ETC___d16;

  // submodule m_outstanding
  Counter #(.width(32'd32), .init(32'd0)) m_outstanding(.CLK(CLK),
							.RST(RST_N),
							.DATA_A(m_outstanding$DATA_A),
							.DATA_B(m_outstanding$DATA_B),
							.DATA_C(m_outstanding$DATA_C),
							.DATA_F(m_outstanding$DATA_F),
							.ADDA(m_outstanding$ADDA),
							.ADDB(m_outstanding$ADDB),
							.SETC(m_outstanding$SETC),
							.SETF(m_outstanding$SETF),
							.Q_OUT(m_outstanding$Q_OUT));

  // submodule pipeline_infifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) pipeline_infifo(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(pipeline_infifo$D_IN),
							  .ENQ(pipeline_infifo$ENQ),
							  .DEQ(pipeline_infifo$DEQ),
							  .CLR(pipeline_infifo$CLR),
							  .D_OUT(pipeline_infifo$D_OUT),
							  .FULL_N(pipeline_infifo$FULL_N),
							  .EMPTY_N(pipeline_infifo$EMPTY_N));

  // submodule pipeline_m_0
  mkMultiplier pipeline_m_0(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_0$putOperands_coeff),
			    .putOperands_samp(pipeline_m_0$putOperands_samp),
			    .EN_putOperands(pipeline_m_0$EN_putOperands),
			    .EN_getResult(pipeline_m_0$EN_getResult),
			    .RDY_putOperands(pipeline_m_0$RDY_putOperands),
			    .getResult(pipeline_m_0$getResult),
			    .RDY_getResult(pipeline_m_0$RDY_getResult));

  // submodule pipeline_m_1
  mkMultiplier pipeline_m_1(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_1$putOperands_coeff),
			    .putOperands_samp(pipeline_m_1$putOperands_samp),
			    .EN_putOperands(pipeline_m_1$EN_putOperands),
			    .EN_getResult(pipeline_m_1$EN_getResult),
			    .RDY_putOperands(pipeline_m_1$RDY_putOperands),
			    .getResult(pipeline_m_1$getResult),
			    .RDY_getResult(pipeline_m_1$RDY_getResult));

  // submodule pipeline_m_2
  mkMultiplier pipeline_m_2(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_2$putOperands_coeff),
			    .putOperands_samp(pipeline_m_2$putOperands_samp),
			    .EN_putOperands(pipeline_m_2$EN_putOperands),
			    .EN_getResult(pipeline_m_2$EN_getResult),
			    .RDY_putOperands(pipeline_m_2$RDY_putOperands),
			    .getResult(pipeline_m_2$getResult),
			    .RDY_getResult(pipeline_m_2$RDY_getResult));

  // submodule pipeline_m_3
  mkMultiplier pipeline_m_3(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_3$putOperands_coeff),
			    .putOperands_samp(pipeline_m_3$putOperands_samp),
			    .EN_putOperands(pipeline_m_3$EN_putOperands),
			    .EN_getResult(pipeline_m_3$EN_getResult),
			    .RDY_putOperands(pipeline_m_3$RDY_putOperands),
			    .getResult(pipeline_m_3$getResult),
			    .RDY_getResult(pipeline_m_3$RDY_getResult));

  // submodule pipeline_m_4
  mkMultiplier pipeline_m_4(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_4$putOperands_coeff),
			    .putOperands_samp(pipeline_m_4$putOperands_samp),
			    .EN_putOperands(pipeline_m_4$EN_putOperands),
			    .EN_getResult(pipeline_m_4$EN_getResult),
			    .RDY_putOperands(pipeline_m_4$RDY_putOperands),
			    .getResult(pipeline_m_4$getResult),
			    .RDY_getResult(pipeline_m_4$RDY_getResult));

  // submodule pipeline_m_5
  mkMultiplier pipeline_m_5(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_5$putOperands_coeff),
			    .putOperands_samp(pipeline_m_5$putOperands_samp),
			    .EN_putOperands(pipeline_m_5$EN_putOperands),
			    .EN_getResult(pipeline_m_5$EN_getResult),
			    .RDY_putOperands(pipeline_m_5$RDY_putOperands),
			    .getResult(pipeline_m_5$getResult),
			    .RDY_getResult(pipeline_m_5$RDY_getResult));

  // submodule pipeline_m_6
  mkMultiplier pipeline_m_6(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_6$putOperands_coeff),
			    .putOperands_samp(pipeline_m_6$putOperands_samp),
			    .EN_putOperands(pipeline_m_6$EN_putOperands),
			    .EN_getResult(pipeline_m_6$EN_getResult),
			    .RDY_putOperands(pipeline_m_6$RDY_putOperands),
			    .getResult(pipeline_m_6$getResult),
			    .RDY_getResult(pipeline_m_6$RDY_getResult));

  // submodule pipeline_m_7
  mkMultiplier pipeline_m_7(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_7$putOperands_coeff),
			    .putOperands_samp(pipeline_m_7$putOperands_samp),
			    .EN_putOperands(pipeline_m_7$EN_putOperands),
			    .EN_getResult(pipeline_m_7$EN_getResult),
			    .RDY_putOperands(pipeline_m_7$RDY_putOperands),
			    .getResult(pipeline_m_7$getResult),
			    .RDY_getResult(pipeline_m_7$RDY_getResult));

  // submodule pipeline_m_8
  mkMultiplier pipeline_m_8(.CLK(CLK),
			    .RST_N(RST_N),
			    .putOperands_coeff(pipeline_m_8$putOperands_coeff),
			    .putOperands_samp(pipeline_m_8$putOperands_samp),
			    .EN_putOperands(pipeline_m_8$EN_putOperands),
			    .EN_getResult(pipeline_m_8$EN_getResult),
			    .RDY_putOperands(pipeline_m_8$RDY_putOperands),
			    .getResult(pipeline_m_8$getResult),
			    .RDY_getResult(pipeline_m_8$RDY_getResult));

  // submodule pipeline_outfifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) pipeline_outfifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(pipeline_outfifo$D_IN),
							   .ENQ(pipeline_outfifo$ENQ),
							   .DEQ(pipeline_outfifo$DEQ),
							   .CLR(pipeline_outfifo$CLR),
							   .D_OUT(pipeline_outfifo$D_OUT),
							   .FULL_N(pipeline_outfifo$FULL_N),
							   .EMPTY_N(pipeline_outfifo$EMPTY_N));

  // rule RL_read
  assign CAN_FIRE_RL_read =
	     pipeline_infifo$FULL_N && m_inited && !m_doneread &&
	     m_outstanding$Q_OUT != 32'hFFFFFFFF ;
  assign WILL_FIRE_RL_read = CAN_FIRE_RL_read ;

  // rule RL_finish
  assign CAN_FIRE_RL_finish = m_doneread && m_outstanding$Q_OUT == 32'd0 ;
  assign WILL_FIRE_RL_finish = CAN_FIRE_RL_finish ;

  // rule RL_init
  assign CAN_FIRE_RL_init = !m_inited ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // rule RL_write
  assign CAN_FIRE_RL_write = pipeline_outfifo$EMPTY_N && m_inited ;
  assign WILL_FIRE_RL_write = CAN_FIRE_RL_write ;

  // rule RL_pipeline_mult
  assign CAN_FIRE_RL_pipeline_mult =
	     pipeline_m_0$RDY_putOperands && pipeline_m_1$RDY_putOperands &&
	     pipeline_m_2$RDY_putOperands &&
	     pipeline_m_3_RDY_putOperands_AND_pipeline_m_4__ETC___d16 ;
  assign WILL_FIRE_RL_pipeline_mult = CAN_FIRE_RL_pipeline_mult ;

  // rule RL_pipeline_add
  assign CAN_FIRE_RL_pipeline_add =
	     pipeline_m_0$RDY_getResult && pipeline_m_1$RDY_getResult &&
	     pipeline_m_2$RDY_getResult &&
	     pipeline_m_3_RDY_getResult__2_AND_pipeline_m_4_ETC___d44 ;
  assign WILL_FIRE_RL_pipeline_add = CAN_FIRE_RL_pipeline_add ;

  // register m_doneread
  assign m_doneread$D_IN = 1'd1 ;
  assign m_doneread$EN =
	     WILL_FIRE_RL_read &&
	     (x__h7444 == 32'hFFFFFFFF || b__h7293 == 32'hFFFFFFFF) ;

  // register m_in
  assign m_in$D_IN = TASK_fopen___d68 ;
  assign m_in$EN = CAN_FIRE_RL_init ;

  // register m_inited
  assign m_inited$D_IN = 1'd1 ;
  assign m_inited$EN = CAN_FIRE_RL_init ;

  // register m_out
  assign m_out$D_IN = TASK_fopen___d70 ;
  assign m_out$EN = CAN_FIRE_RL_init ;

  // register pipeline_r_0
  assign pipeline_r_0$D_IN = pipeline_infifo$D_OUT ;
  assign pipeline_r_0$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_1
  assign pipeline_r_1$D_IN = pipeline_r_0 ;
  assign pipeline_r_1$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_2
  assign pipeline_r_2$D_IN = pipeline_r_1 ;
  assign pipeline_r_2$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_3
  assign pipeline_r_3$D_IN = pipeline_r_2 ;
  assign pipeline_r_3$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_4
  assign pipeline_r_4$D_IN = pipeline_r_3 ;
  assign pipeline_r_4$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_5
  assign pipeline_r_5$D_IN = pipeline_r_4 ;
  assign pipeline_r_5$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_6
  assign pipeline_r_6$D_IN = pipeline_r_5 ;
  assign pipeline_r_6$EN = CAN_FIRE_RL_pipeline_mult ;

  // register pipeline_r_7
  assign pipeline_r_7$D_IN = pipeline_r_6 ;
  assign pipeline_r_7$EN = CAN_FIRE_RL_pipeline_mult ;

  // submodule m_outstanding
  assign m_outstanding$DATA_A = 32'd1 ;
  assign m_outstanding$DATA_B = 32'hFFFFFFFF ;
  assign m_outstanding$DATA_C = 32'h0 ;
  assign m_outstanding$DATA_F = 32'h0 ;
  assign m_outstanding$ADDA =
	     WILL_FIRE_RL_read && x__h7444 != 32'hFFFFFFFF &&
	     b__h7293 != 32'hFFFFFFFF ;
  assign m_outstanding$ADDB = CAN_FIRE_RL_write ;
  assign m_outstanding$SETC = 1'b0 ;
  assign m_outstanding$SETF = 1'b0 ;

  // submodule pipeline_infifo
  assign pipeline_infifo$D_IN = { b__h7293[7:0], x__h7444[7:0] } ;
  assign pipeline_infifo$ENQ =
	     WILL_FIRE_RL_read && x__h7444 != 32'hFFFFFFFF &&
	     b__h7293 != 32'hFFFFFFFF ;
  assign pipeline_infifo$DEQ = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_infifo$CLR = 1'b0 ;

  // submodule pipeline_m_0
  assign pipeline_m_0$putOperands_coeff = 32'hFFFFFCD3 ;
  assign pipeline_m_0$putOperands_samp = pipeline_infifo$D_OUT ;
  assign pipeline_m_0$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_0$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_1
  assign pipeline_m_1$putOperands_coeff = 32'd0 ;
  assign pipeline_m_1$putOperands_samp = pipeline_r_0 ;
  assign pipeline_m_1$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_1$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_2
  assign pipeline_m_2$putOperands_coeff = 32'hFFFFFC98 ;
  assign pipeline_m_2$putOperands_samp = pipeline_r_1 ;
  assign pipeline_m_2$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_2$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_3
  assign pipeline_m_3$putOperands_coeff = 32'd0 ;
  assign pipeline_m_3$putOperands_samp = pipeline_r_2 ;
  assign pipeline_m_3$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_3$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_4
  assign pipeline_m_4$putOperands_coeff = 32'd53615 ;
  assign pipeline_m_4$putOperands_samp = pipeline_r_3 ;
  assign pipeline_m_4$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_4$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_5
  assign pipeline_m_5$putOperands_coeff = 32'd0 ;
  assign pipeline_m_5$putOperands_samp = pipeline_r_4 ;
  assign pipeline_m_5$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_5$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_6
  assign pipeline_m_6$putOperands_coeff = 32'hFFFFFC98 ;
  assign pipeline_m_6$putOperands_samp = pipeline_r_5 ;
  assign pipeline_m_6$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_6$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_7
  assign pipeline_m_7$putOperands_coeff = 32'd0 ;
  assign pipeline_m_7$putOperands_samp = pipeline_r_6 ;
  assign pipeline_m_7$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_7$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_m_8
  assign pipeline_m_8$putOperands_coeff = 32'hFFFFFCD3 ;
  assign pipeline_m_8$putOperands_samp = pipeline_r_7 ;
  assign pipeline_m_8$EN_putOperands = CAN_FIRE_RL_pipeline_mult ;
  assign pipeline_m_8$EN_getResult = CAN_FIRE_RL_pipeline_add ;

  // submodule pipeline_outfifo
  assign pipeline_outfifo$D_IN = x__h6115[31:16] ;
  assign pipeline_outfifo$ENQ = CAN_FIRE_RL_pipeline_add ;
  assign pipeline_outfifo$DEQ = CAN_FIRE_RL_write ;
  assign pipeline_outfifo$CLR = 1'b0 ;

  // remaining internal signals
  assign pipeline_m_3_RDY_getResult__2_AND_pipeline_m_4_ETC___d44 =
	     pipeline_m_3$RDY_getResult && pipeline_m_4$RDY_getResult &&
	     pipeline_m_5$RDY_getResult &&
	     pipeline_m_6$RDY_getResult &&
	     pipeline_m_7$RDY_getResult &&
	     pipeline_m_8$RDY_getResult &&
	     pipeline_outfifo$FULL_N ;
  assign pipeline_m_3_RDY_putOperands_AND_pipeline_m_4__ETC___d16 =
	     pipeline_m_3$RDY_putOperands && pipeline_m_4$RDY_putOperands &&
	     pipeline_m_5$RDY_putOperands &&
	     pipeline_m_6$RDY_putOperands &&
	     pipeline_m_7$RDY_putOperands &&
	     pipeline_m_8$RDY_putOperands &&
	     pipeline_infifo$EMPTY_N ;
  assign x__h6115 = x__h6139 + pipeline_m_8$getResult ;
  assign x__h6139 = x__h6163 + pipeline_m_7$getResult ;
  assign x__h6163 = x__h6187 + pipeline_m_6$getResult ;
  assign x__h6187 = x__h6211 + pipeline_m_5$getResult ;
  assign x__h6211 = x__h6235 + pipeline_m_4$getResult ;
  assign x__h6235 = x__h6259 + pipeline_m_3$getResult ;
  assign x__h6259 = x__h6283 + pipeline_m_2$getResult ;
  assign x__h6283 = pipeline_m_0$getResult + pipeline_m_1$getResult ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_doneread <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_inited <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pipeline_r_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pipeline_r_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (m_doneread$EN)
	  m_doneread <= `BSV_ASSIGNMENT_DELAY m_doneread$D_IN;
	if (m_inited$EN) m_inited <= `BSV_ASSIGNMENT_DELAY m_inited$D_IN;
	if (pipeline_r_0$EN)
	  pipeline_r_0 <= `BSV_ASSIGNMENT_DELAY pipeline_r_0$D_IN;
	if (pipeline_r_1$EN)
	  pipeline_r_1 <= `BSV_ASSIGNMENT_DELAY pipeline_r_1$D_IN;
	if (pipeline_r_2$EN)
	  pipeline_r_2 <= `BSV_ASSIGNMENT_DELAY pipeline_r_2$D_IN;
	if (pipeline_r_3$EN)
	  pipeline_r_3 <= `BSV_ASSIGNMENT_DELAY pipeline_r_3$D_IN;
	if (pipeline_r_4$EN)
	  pipeline_r_4 <= `BSV_ASSIGNMENT_DELAY pipeline_r_4$D_IN;
	if (pipeline_r_5$EN)
	  pipeline_r_5 <= `BSV_ASSIGNMENT_DELAY pipeline_r_5$D_IN;
	if (pipeline_r_6$EN)
	  pipeline_r_6 <= `BSV_ASSIGNMENT_DELAY pipeline_r_6$D_IN;
	if (pipeline_r_7$EN)
	  pipeline_r_7 <= `BSV_ASSIGNMENT_DELAY pipeline_r_7$D_IN;
      end
    if (m_in$EN) m_in <= `BSV_ASSIGNMENT_DELAY m_in$D_IN;
    if (m_out$EN) m_out <= `BSV_ASSIGNMENT_DELAY m_out$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_doneread = 1'h0;
    m_in = 32'hAAAAAAAA;
    m_inited = 1'h0;
    m_out = 32'hAAAAAAAA;
    pipeline_r_0 = 16'hAAAA;
    pipeline_r_1 = 16'hAAAA;
    pipeline_r_2 = 16'hAAAA;
    pipeline_r_3 = 16'hAAAA;
    pipeline_r_4 = 16'hAAAA;
    pipeline_r_5 = 16'hAAAA;
    pipeline_r_6 = 16'hAAAA;
    pipeline_r_7 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read)
	begin
	  x__h7444 = $fgetc(m_in);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read)
	begin
	  b__h7293 = $fgetc(m_in);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read &&
	  (x__h7444 == 32'hFFFFFFFF || b__h7293 == 32'hFFFFFFFF))
	$fclose(m_in);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_finish) $fclose(m_out);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_finish) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init)
	begin
	  TASK_fopen___d68 = $fopen("in.pcm", "rb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init && TASK_fopen___d68 == 32'd0)
	$display("couldn't open in.pcm");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init && TASK_fopen___d68 == 32'd0) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init)
	begin
	  TASK_fopen___d70 = $fopen("out.pcm", "wb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init && TASK_fopen___d70 == 32'd0)
	$display("couldn't open out.pcm for write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_init && TASK_fopen___d70 == 32'd0) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write)
	$fwrite(m_out, "%c", pipeline_outfifo$D_OUT[7:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write)
	$fwrite(m_out, "%c", pipeline_outfifo$D_OUT[15:8]);
  end
  // synopsys translate_on
endmodule  // mkTestDriver

