//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Fri Nov 11 22:09:17 PST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_putOperands                O     1 reg
// getResult                      O    32 reg
// RDY_getResult                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putOperands_coeff              I    32
// putOperands_samp               I    16
// EN_putOperands                 I     1
// EN_getResult                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMultiplier(CLK,
		    RST_N,

		    putOperands_coeff,
		    putOperands_samp,
		    EN_putOperands,
		    RDY_putOperands,

		    EN_getResult,
		    getResult,
		    RDY_getResult);
  input  CLK;
  input  RST_N;

  // action method putOperands
  input  [31 : 0] putOperands_coeff;
  input  [15 : 0] putOperands_samp;
  input  EN_putOperands;
  output RDY_putOperands;

  // actionvalue method getResult
  input  EN_getResult;
  output [31 : 0] getResult;
  output RDY_getResult;

  // signals for module outputs
  wire [31 : 0] getResult;
  wire RDY_getResult, RDY_putOperands;

  // ports of submodule results
  wire [31 : 0] results$D_IN, results$D_OUT;
  wire results$CLR, results$DEQ, results$EMPTY_N, results$ENQ, results$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_getResult,
       CAN_FIRE_putOperands,
       WILL_FIRE_getResult,
       WILL_FIRE_putOperands;

  // remaining internal signals
  wire [63 : 0] IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15,
		IF_putOperands_coeff_BIT_31_THEN_NEG_putOperan_ETC___d13;
  wire [47 : 0] IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30,
		IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d27;
  wire [31 : 0] x__h1060, x__h1079, x__h1095;
  wire [15 : 0] y_f__h2135;

  // action method putOperands
  assign RDY_putOperands = results$FULL_N ;
  assign CAN_FIRE_putOperands = results$FULL_N ;
  assign WILL_FIRE_putOperands = EN_putOperands ;

  // actionvalue method getResult
  assign getResult = results$D_OUT ;
  assign RDY_getResult = results$EMPTY_N ;
  assign CAN_FIRE_getResult = results$EMPTY_N ;
  assign WILL_FIRE_getResult = EN_getResult ;

  // submodule results
  FIFO2 #(.width(32'd32), .guarded(1'd1)) results(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(results$D_IN),
						  .ENQ(results$ENQ),
						  .DEQ(results$DEQ),
						  .CLR(results$CLR),
						  .D_OUT(results$D_OUT),
						  .FULL_N(results$FULL_N),
						  .EMPTY_N(results$EMPTY_N));

  // submodule results
  assign results$D_IN =
	     (!IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[47] &&
	      (IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[31] ||
	       IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[47:32] !=
	       16'd0)) ?
	       32'h7FFFFFFF :
	       ((IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[47] &&
		 (!IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[31] ||
		  ~IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[47:32] !=
		  16'd0)) ?
		  32'h80000000 :
		  IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30[31:0]) ;
  assign results$ENQ = EN_putOperands ;
  assign results$DEQ = EN_getResult ;
  assign results$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_putOperands_coeff_BIT_31_AND_NOT_put_ETC___d30 =
	     (!IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15[63] &&
	      IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d27[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d27 ;
  assign IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15 =
	     (putOperands_coeff[31] && !putOperands_samp[15] ||
	      putOperands_samp[15] && !putOperands_coeff[31]) ?
	       -IF_putOperands_coeff_BIT_31_THEN_NEG_putOperan_ETC___d13 :
	       IF_putOperands_coeff_BIT_31_THEN_NEG_putOperan_ETC___d13 ;
  assign IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d27 =
	     IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15[63:16] +
	     { 32'd0, y_f__h2135 } ;
  assign IF_putOperands_coeff_BIT_31_THEN_NEG_putOperan_ETC___d13 =
	     x__h1060 * x__h1079 ;
  assign x__h1060 =
	     putOperands_coeff[31] ? -putOperands_coeff : putOperands_coeff ;
  assign x__h1079 = putOperands_samp[15] ? -x__h1095 : x__h1095 ;
  assign x__h1095 = { putOperands_samp, 16'd0 } ;
  assign y_f__h2135 =
	     (IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15[15] &&
	      (IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15[63] ||
	       IF_putOperands_coeff_BIT_31_AND_NOT_putOperand_ETC___d15[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
endmodule  // mkMultiplier

