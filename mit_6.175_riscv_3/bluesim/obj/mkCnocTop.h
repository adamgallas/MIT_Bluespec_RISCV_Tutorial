/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Fri Dec  2 22:41:44 PST 2022
 * 
 */

/* Generation options: */
#ifndef __mkCnocTop_h__
#define __mkCnocTop_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkConnectalMemoryInitializationInput.h"
#include "mkConnectalProcIndicationOutput.h"
#include "mkConnectalProcRequestInput.h"
#include "mkProc.h"


/* Class declaration for the mkCnocTop module */
class MOD_mkCnocTop : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkConnectalMemoryInitializationInput INST_lConnectalMemoryInitializationInput;
  MOD_Reg<tUInt8> INST_lConnectalMemoryInitializationInputNoc_bpState;
  MOD_Fifo<tUInt32> INST_lConnectalMemoryInitializationInputNoc_fifoMsgSink;
  MOD_Reg<tUInt8> INST_lConnectalMemoryInitializationInputNoc_messageWordsReg;
  MOD_Reg<tUInt8> INST_lConnectalMemoryInitializationInputNoc_methodIdReg;
  MOD_mkConnectalProcIndicationOutput INST_lConnectalProcIndicationOutput;
  MOD_Reg<tUInt8> INST_lConnectalProcIndicationOutputNoc_bpState;
  MOD_Fifo<tUInt32> INST_lConnectalProcIndicationOutputNoc_fifoMsgSource;
  MOD_Reg<tUInt32> INST_lConnectalProcIndicationOutputNoc_messageWordsReg;
  MOD_Reg<tUInt8> INST_lConnectalProcIndicationOutputNoc_methodIdReg;
  MOD_mkConnectalProcRequestInput INST_lConnectalProcRequestInput;
  MOD_Reg<tUInt8> INST_lConnectalProcRequestInputNoc_bpState;
  MOD_Fifo<tUInt32> INST_lConnectalProcRequestInputNoc_fifoMsgSink;
  MOD_Reg<tUInt8> INST_lConnectalProcRequestInputNoc_messageWordsReg;
  MOD_Reg<tUInt8> INST_lConnectalProcRequestInputNoc_methodIdReg;
  MOD_mkProc INST_lConnectalWrapper_m;
 
 /* Constructor */
 public:
  MOD_mkCnocTop(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_readers_1_readData_put;
  tUWide PORT_readers_0_readData_put;
  tUWide PORT_writers_1_writeData_get;
  tUWide PORT_writers_1_writeReq_get;
  tUWide PORT_writers_0_writeData_get;
  tUWide PORT_writers_0_writeReq_get;
  tUWide PORT_readers_1_readReq_get;
  tUWide PORT_readers_0_readReq_get;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_lConnectalProcIndicationOutputNoc_fifoMsgSourc_ETC___d112;
  tUInt8 DEF_x__h2916;
  tUInt8 DEF_x__h1729;
  tUInt8 DEF_lConnectalProcIndicationOutput_portalIfc_indic_ETC___d32;
  tUInt8 DEF_lConnectalProcIndicationOutput_portalIfc_indic_ETC___d31;
  tUInt8 DEF_lConnectalProcRequestInputNoc_methodIdReg_9_EQ_0___d80;
 
 /* Local definitions */
 private:
  tUInt32 DEF_data__h2875;
  tUInt32 DEF_data__h2195;
  tUWide DEF__1_CONCAT_DONTCARE___d10;
  tUWide DEF__0_CONCAT_lConnectalMemoryInitializationInput_p_ETC___d21;
 
 /* Rules */
 public:
  void RL_lConnectalWrapper_relayMessage();
  void RL_handle_done_request();
  void RL_handle_request_request();
  void RL_handle_hostToCpu_request();
  void RL_lConnectalProcIndicationOutputNoc_sendHeader();
  void RL_lConnectalProcIndicationOutputNoc_sendMessage();
  void RL_lConnectalProcRequestInputNoc_receiveMessageHeader();
  void RL_lConnectalProcRequestInputNoc_receiveMessage();
  void RL_lConnectalMemoryInitializationInputNoc_receiveMessageHeader();
  void RL_lConnectalMemoryInitializationInputNoc_receiveMessage();
 
 /* Methods */
 public:
  tUInt32 METH_requests_0_id();
  tUInt8 METH_RDY_requests_0_id();
  tUInt32 METH_requests_1_id();
  tUInt8 METH_RDY_requests_1_id();
  tUInt32 METH_indications_0_id();
  tUInt8 METH_RDY_indications_0_id();
  void METH_requests_0_message_enq(tUInt32 ARG_requests_0_message_enq_v);
  tUInt8 METH_RDY_requests_0_message_enq();
  tUInt8 METH_requests_0_message_notFull();
  tUInt8 METH_RDY_requests_0_message_notFull();
  void METH_requests_1_message_enq(tUInt32 ARG_requests_1_message_enq_v);
  tUInt8 METH_RDY_requests_1_message_enq();
  tUInt8 METH_requests_1_message_notFull();
  tUInt8 METH_RDY_requests_1_message_notFull();
  tUInt32 METH_indications_0_message_first();
  tUInt8 METH_RDY_indications_0_message_first();
  void METH_indications_0_message_deq();
  tUInt8 METH_RDY_indications_0_message_deq();
  tUInt8 METH_indications_0_message_notEmpty();
  tUInt8 METH_RDY_indications_0_message_notEmpty();
  tUWide METH_readers_0_readReq_get();
  tUInt8 METH_RDY_readers_0_readReq_get();
  void METH_readers_0_readData_put(tUWide ARG_readers_0_readData_put);
  tUInt8 METH_RDY_readers_0_readData_put();
  tUWide METH_readers_1_readReq_get();
  tUInt8 METH_RDY_readers_1_readReq_get();
  void METH_readers_1_readData_put(tUWide ARG_readers_1_readData_put);
  tUInt8 METH_RDY_readers_1_readData_put();
  tUWide METH_writers_0_writeReq_get();
  tUInt8 METH_RDY_writers_0_writeReq_get();
  tUWide METH_writers_0_writeData_get();
  tUInt8 METH_RDY_writers_0_writeData_get();
  void METH_writers_0_writeDone_put(tUInt8 ARG_writers_0_writeDone_put);
  tUInt8 METH_RDY_writers_0_writeDone_put();
  tUWide METH_writers_1_writeReq_get();
  tUInt8 METH_RDY_writers_1_writeReq_get();
  tUWide METH_writers_1_writeData_get();
  tUInt8 METH_RDY_writers_1_writeData_get();
  void METH_writers_1_writeDone_put(tUInt8 ARG_writers_1_writeDone_put);
  tUInt8 METH_RDY_writers_1_writeDone_put();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCnocTop &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCnocTop &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCnocTop &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkCnocTop &backing);
};

#endif /* ifndef __mkCnocTop_h__ */
