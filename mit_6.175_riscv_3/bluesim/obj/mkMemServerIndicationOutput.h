/*
 * Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
 * 
 * On Fri Dec  2 22:41:44 PST 2022
 * 
 */

/* Generation options: */
#ifndef __mkMemServerIndicationOutput_h__
#define __mkMemServerIndicationOutput_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMemServerIndicationOutputPipes.h"


/* Class declaration for the mkMemServerIndicationOutput module */
class MOD_mkMemServerIndicationOutput : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkMemServerIndicationOutputPipes INST_indicationPipes;
 
 /* Constructor */
 public:
  MOD_mkMemServerIndicationOutput(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_ifc_reportStateDbg_rec;
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
  tUWide DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2;
  tUWide DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUInt32 METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber);
  tUInt8 METH_RDY_portalIfc_messageSize_size();
  tUInt32 METH_portalIfc_indications_0_first();
  tUInt8 METH_RDY_portalIfc_indications_0_first();
  void METH_portalIfc_indications_0_deq();
  tUInt8 METH_RDY_portalIfc_indications_0_deq();
  tUInt8 METH_portalIfc_indications_0_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_0_notEmpty();
  tUInt32 METH_portalIfc_indications_1_first();
  tUInt8 METH_RDY_portalIfc_indications_1_first();
  void METH_portalIfc_indications_1_deq();
  tUInt8 METH_RDY_portalIfc_indications_1_deq();
  tUInt8 METH_portalIfc_indications_1_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_1_notEmpty();
  tUInt32 METH_portalIfc_indications_2_first();
  tUInt8 METH_RDY_portalIfc_indications_2_first();
  void METH_portalIfc_indications_2_deq();
  tUInt8 METH_RDY_portalIfc_indications_2_deq();
  tUInt8 METH_portalIfc_indications_2_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_2_notEmpty();
  tUInt32 METH_portalIfc_indications_3_first();
  tUInt8 METH_RDY_portalIfc_indications_3_first();
  void METH_portalIfc_indications_3_deq();
  tUInt8 METH_RDY_portalIfc_indications_3_deq();
  tUInt8 METH_portalIfc_indications_3_notEmpty();
  tUInt8 METH_RDY_portalIfc_indications_3_notEmpty();
  tUInt8 METH_portalIfc_intr_status();
  tUInt8 METH_RDY_portalIfc_intr_status();
  tUInt32 METH_portalIfc_intr_channel();
  tUInt8 METH_RDY_portalIfc_intr_channel();
  void METH_ifc_addrResponse(tUInt64 ARG_ifc_addrResponse_physAddr);
  tUInt8 METH_RDY_ifc_addrResponse();
  void METH_ifc_reportStateDbg(tUWide ARG_ifc_reportStateDbg_rec);
  tUInt8 METH_RDY_ifc_reportStateDbg();
  void METH_ifc_reportMemoryTraffic(tUInt64 ARG_ifc_reportMemoryTraffic_words);
  tUInt8 METH_RDY_ifc_reportMemoryTraffic();
  void METH_ifc_error(tUInt32 ARG_ifc_error_code,
		      tUInt32 ARG_ifc_error_sglId,
		      tUInt64 ARG_ifc_error_offset,
		      tUInt64 ARG_ifc_error_extra);
  tUInt8 METH_RDY_ifc_error();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMemServerIndicationOutput &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkMemServerIndicationOutput &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkMemServerIndicationOutput &backing);
};

#endif /* ifndef __mkMemServerIndicationOutput_h__ */
