//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Sat Nov 12 19:02:01 PST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_enq                        O     1 reg
// deq                            O  1024 reg
// RDY_deq                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// enq_in                         I  1024 reg
// EN_enq                         I     1
// EN_deq                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFftFolded(CLK,
		   RST_N,

		   enq_in,
		   EN_enq,
		   RDY_enq,

		   EN_deq,
		   deq,
		   RDY_deq);
  input  CLK;
  input  RST_N;

  // action method enq
  input  [1023 : 0] enq_in;
  input  EN_enq;
  output RDY_enq;

  // actionvalue method deq
  input  EN_deq;
  output [1023 : 0] deq;
  output RDY_deq;

  // signals for module outputs
  wire [1023 : 0] deq;
  wire RDY_deq, RDY_enq;

  // register sReg
  reg [1023 : 0] sReg;
  wire [1023 : 0] sReg$D_IN;
  wire sReg$EN;

  // register stage
  reg [2 : 0] stage;
  wire [2 : 0] stage$D_IN;
  wire stage$EN;

  // ports of submodule bfly_0
  wire [63 : 0] bfly_0$bfly4, bfly_0$bfly4_t, bfly_0$bfly4_x;

  // ports of submodule bfly_1
  wire [63 : 0] bfly_1$bfly4, bfly_1$bfly4_t, bfly_1$bfly4_x;

  // ports of submodule bfly_10
  wire [63 : 0] bfly_10$bfly4, bfly_10$bfly4_t, bfly_10$bfly4_x;

  // ports of submodule bfly_11
  wire [63 : 0] bfly_11$bfly4, bfly_11$bfly4_t, bfly_11$bfly4_x;

  // ports of submodule bfly_12
  wire [63 : 0] bfly_12$bfly4, bfly_12$bfly4_t, bfly_12$bfly4_x;

  // ports of submodule bfly_13
  wire [63 : 0] bfly_13$bfly4, bfly_13$bfly4_t, bfly_13$bfly4_x;

  // ports of submodule bfly_14
  wire [63 : 0] bfly_14$bfly4, bfly_14$bfly4_t, bfly_14$bfly4_x;

  // ports of submodule bfly_15
  wire [63 : 0] bfly_15$bfly4, bfly_15$bfly4_t, bfly_15$bfly4_x;

  // ports of submodule bfly_2
  wire [63 : 0] bfly_2$bfly4, bfly_2$bfly4_t, bfly_2$bfly4_x;

  // ports of submodule bfly_3
  wire [63 : 0] bfly_3$bfly4, bfly_3$bfly4_t, bfly_3$bfly4_x;

  // ports of submodule bfly_4
  wire [63 : 0] bfly_4$bfly4, bfly_4$bfly4_t, bfly_4$bfly4_x;

  // ports of submodule bfly_5
  wire [63 : 0] bfly_5$bfly4, bfly_5$bfly4_t, bfly_5$bfly4_x;

  // ports of submodule bfly_6
  wire [63 : 0] bfly_6$bfly4, bfly_6$bfly4_t, bfly_6$bfly4_x;

  // ports of submodule bfly_7
  wire [63 : 0] bfly_7$bfly4, bfly_7$bfly4_t, bfly_7$bfly4_x;

  // ports of submodule bfly_8
  wire [63 : 0] bfly_8$bfly4, bfly_8$bfly4_t, bfly_8$bfly4_x;

  // ports of submodule bfly_9
  wire [63 : 0] bfly_9$bfly4, bfly_9$bfly4_t, bfly_9$bfly4_x;

  // ports of submodule inFifo
  wire [1023 : 0] inFifo$D_IN, inFifo$D_OUT;
  wire inFifo$CLR, inFifo$DEQ, inFifo$EMPTY_N, inFifo$ENQ, inFifo$FULL_N;

  // ports of submodule outFifo
  wire [1023 : 0] outFifo$D_IN, outFifo$D_OUT;
  wire outFifo$CLR, outFifo$DEQ, outFifo$EMPTY_N, outFifo$ENQ, outFifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_foldedCirculate, WILL_FIRE_RL_foldedEntry;

  // inputs to muxes for submodule ports
  wire [2 : 0] MUX_stage$write_1__VAL_1;
  wire MUX_stage$write_1__SEL_1;

  // remaining internal signals
  wire [7 : 0] x__h14071,
	       x__h14364,
	       x__h14405,
	       x__h14456,
	       x__h14497,
	       x__h14548,
	       x__h14589,
	       x__h14640,
	       x__h16274,
	       x__h16567,
	       x__h16608,
	       x__h16659,
	       x__h16700,
	       x__h16751,
	       x__h16792,
	       x__h16843,
	       x__h18477,
	       x__h18770,
	       x__h18811,
	       x__h18862,
	       x__h18903,
	       x__h18954,
	       x__h18995,
	       x__h19046,
	       x__h20680,
	       x__h20973,
	       x__h21014,
	       x__h21065,
	       x__h21106,
	       x__h21157,
	       x__h21198,
	       x__h21249,
	       x__h22883,
	       x__h23176,
	       x__h23217,
	       x__h23268,
	       x__h23309,
	       x__h23360,
	       x__h23401,
	       x__h23452,
	       x__h25086,
	       x__h25379,
	       x__h25420,
	       x__h25471,
	       x__h25512,
	       x__h25563,
	       x__h25604,
	       x__h25655,
	       x__h27289,
	       x__h27582,
	       x__h27623,
	       x__h27674,
	       x__h27715,
	       x__h27766,
	       x__h27807,
	       x__h27858,
	       x__h29492,
	       x__h29785,
	       x__h29826,
	       x__h29877,
	       x__h29918,
	       x__h29969,
	       x__h30010,
	       x__h30061,
	       x__h31695,
	       x__h31988,
	       x__h32029,
	       x__h32080,
	       x__h32121,
	       x__h32172,
	       x__h32213,
	       x__h32264,
	       x__h33898,
	       x__h34191,
	       x__h34232,
	       x__h34283,
	       x__h34324,
	       x__h34375,
	       x__h34416,
	       x__h34467,
	       x__h36101,
	       x__h36394,
	       x__h36435,
	       x__h36486,
	       x__h36527,
	       x__h36578,
	       x__h36619,
	       x__h36670,
	       x__h38304,
	       x__h38597,
	       x__h38638,
	       x__h38689,
	       x__h38730,
	       x__h38781,
	       x__h38822,
	       x__h38873,
	       x__h40507,
	       x__h40800,
	       x__h40841,
	       x__h40892,
	       x__h40933,
	       x__h40984,
	       x__h41025,
	       x__h41076,
	       x__h42710,
	       x__h43003,
	       x__h43044,
	       x__h43095,
	       x__h43136,
	       x__h43187,
	       x__h43228,
	       x__h43279,
	       x__h44913,
	       x__h45206,
	       x__h45247,
	       x__h45298,
	       x__h45339,
	       x__h45390,
	       x__h45431,
	       x__h45482,
	       x__h9150,
	       x__h9443,
	       x__h9484,
	       x__h9535,
	       x__h9576,
	       x__h9627,
	       x__h9668,
	       x__h9719,
	       y__h45464,
	       y__h45471,
	       y__h45484;

  // action method enq
  assign RDY_enq = inFifo$FULL_N ;

  // actionvalue method deq
  assign deq = outFifo$D_OUT ;
  assign RDY_deq = outFifo$EMPTY_N ;

  // submodule bfly_0
  mkBfly4 bfly_0(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_0$bfly4_t),
		 .bfly4_x(bfly_0$bfly4_x),
		 .bfly4(bfly_0$bfly4),
		 .RDY_bfly4());

  // submodule bfly_1
  mkBfly4 bfly_1(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_1$bfly4_t),
		 .bfly4_x(bfly_1$bfly4_x),
		 .bfly4(bfly_1$bfly4),
		 .RDY_bfly4());

  // submodule bfly_10
  mkBfly4 bfly_10(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_10$bfly4_t),
		  .bfly4_x(bfly_10$bfly4_x),
		  .bfly4(bfly_10$bfly4),
		  .RDY_bfly4());

  // submodule bfly_11
  mkBfly4 bfly_11(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_11$bfly4_t),
		  .bfly4_x(bfly_11$bfly4_x),
		  .bfly4(bfly_11$bfly4),
		  .RDY_bfly4());

  // submodule bfly_12
  mkBfly4 bfly_12(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_12$bfly4_t),
		  .bfly4_x(bfly_12$bfly4_x),
		  .bfly4(bfly_12$bfly4),
		  .RDY_bfly4());

  // submodule bfly_13
  mkBfly4 bfly_13(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_13$bfly4_t),
		  .bfly4_x(bfly_13$bfly4_x),
		  .bfly4(bfly_13$bfly4),
		  .RDY_bfly4());

  // submodule bfly_14
  mkBfly4 bfly_14(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_14$bfly4_t),
		  .bfly4_x(bfly_14$bfly4_x),
		  .bfly4(bfly_14$bfly4),
		  .RDY_bfly4());

  // submodule bfly_15
  mkBfly4 bfly_15(.CLK(CLK),
		  .RST_N(RST_N),
		  .bfly4_t(bfly_15$bfly4_t),
		  .bfly4_x(bfly_15$bfly4_x),
		  .bfly4(bfly_15$bfly4),
		  .RDY_bfly4());

  // submodule bfly_2
  mkBfly4 bfly_2(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_2$bfly4_t),
		 .bfly4_x(bfly_2$bfly4_x),
		 .bfly4(bfly_2$bfly4),
		 .RDY_bfly4());

  // submodule bfly_3
  mkBfly4 bfly_3(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_3$bfly4_t),
		 .bfly4_x(bfly_3$bfly4_x),
		 .bfly4(bfly_3$bfly4),
		 .RDY_bfly4());

  // submodule bfly_4
  mkBfly4 bfly_4(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_4$bfly4_t),
		 .bfly4_x(bfly_4$bfly4_x),
		 .bfly4(bfly_4$bfly4),
		 .RDY_bfly4());

  // submodule bfly_5
  mkBfly4 bfly_5(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_5$bfly4_t),
		 .bfly4_x(bfly_5$bfly4_x),
		 .bfly4(bfly_5$bfly4),
		 .RDY_bfly4());

  // submodule bfly_6
  mkBfly4 bfly_6(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_6$bfly4_t),
		 .bfly4_x(bfly_6$bfly4_x),
		 .bfly4(bfly_6$bfly4),
		 .RDY_bfly4());

  // submodule bfly_7
  mkBfly4 bfly_7(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_7$bfly4_t),
		 .bfly4_x(bfly_7$bfly4_x),
		 .bfly4(bfly_7$bfly4),
		 .RDY_bfly4());

  // submodule bfly_8
  mkBfly4 bfly_8(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_8$bfly4_t),
		 .bfly4_x(bfly_8$bfly4_x),
		 .bfly4(bfly_8$bfly4),
		 .RDY_bfly4());

  // submodule bfly_9
  mkBfly4 bfly_9(.CLK(CLK),
		 .RST_N(RST_N),
		 .bfly4_t(bfly_9$bfly4_t),
		 .bfly4_x(bfly_9$bfly4_x),
		 .bfly4(bfly_9$bfly4),
		 .RDY_bfly4());

  // submodule inFifo
  FIFO2 #(.width(32'd1024), .guarded(1'd1)) inFifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(inFifo$D_IN),
						   .ENQ(inFifo$ENQ),
						   .DEQ(inFifo$DEQ),
						   .CLR(inFifo$CLR),
						   .D_OUT(inFifo$D_OUT),
						   .FULL_N(inFifo$FULL_N),
						   .EMPTY_N(inFifo$EMPTY_N));

  // submodule outFifo
  FIFO2 #(.width(32'd1024), .guarded(1'd1)) outFifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(outFifo$D_IN),
						    .ENQ(outFifo$ENQ),
						    .DEQ(outFifo$DEQ),
						    .CLR(outFifo$CLR),
						    .D_OUT(outFifo$D_OUT),
						    .FULL_N(outFifo$FULL_N),
						    .EMPTY_N(outFifo$EMPTY_N));

  // rule RL_foldedEntry
  assign WILL_FIRE_RL_foldedEntry = inFifo$EMPTY_N && stage == 3'd0 ;

  // rule RL_foldedCirculate
  assign WILL_FIRE_RL_foldedCirculate =
	     inFifo$EMPTY_N && stage != 3'd0 && stage != 3'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_stage$write_1__SEL_1 =
	     WILL_FIRE_RL_foldedCirculate || WILL_FIRE_RL_foldedEntry ;
  assign MUX_stage$write_1__VAL_1 = stage + 3'd1 ;

  // register sReg
  assign sReg$D_IN = outFifo$D_IN ;
  assign sReg$EN = MUX_stage$write_1__SEL_1 ;

  // register stage
  assign stage$D_IN =
	     MUX_stage$write_1__SEL_1 ? MUX_stage$write_1__VAL_1 : 3'd0 ;
  assign stage$EN =
	     WILL_FIRE_RL_foldedCirculate || WILL_FIRE_RL_foldedEntry ||
	     outFifo$FULL_N && inFifo$EMPTY_N && stage == 3'd2 ;

  // submodule bfly_0
  assign bfly_0$bfly4_t =
	     { x__h44913,
	       x__h45206,
	       x__h45247,
	       x__h45298,
	       x__h45339,
	       x__h45390,
	       x__h45431,
	       x__h45482 } ;
  assign bfly_0$bfly4_x = (stage == 3'd0) ? inFifo$D_OUT[63:0] : sReg[63:0] ;

  // submodule bfly_1
  assign bfly_1$bfly4_t =
	     { x__h42710,
	       x__h43003,
	       x__h43044,
	       x__h43095,
	       x__h43136,
	       x__h43187,
	       x__h43228,
	       x__h43279 } ;
  assign bfly_1$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[127:64] : sReg[127:64] ;

  // submodule bfly_10
  assign bfly_10$bfly4_t =
	     { x__h22883,
	       x__h23176,
	       x__h23217,
	       x__h23268,
	       x__h23309,
	       x__h23360,
	       x__h23401,
	       x__h23452 } ;
  assign bfly_10$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[703:640] : sReg[703:640] ;

  // submodule bfly_11
  assign bfly_11$bfly4_t =
	     { x__h20680,
	       x__h20973,
	       x__h21014,
	       x__h21065,
	       x__h21106,
	       x__h21157,
	       x__h21198,
	       x__h21249 } ;
  assign bfly_11$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[767:704] : sReg[767:704] ;

  // submodule bfly_12
  assign bfly_12$bfly4_t =
	     { x__h18477,
	       x__h18770,
	       x__h18811,
	       x__h18862,
	       x__h18903,
	       x__h18954,
	       x__h18995,
	       x__h19046 } ;
  assign bfly_12$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[831:768] : sReg[831:768] ;

  // submodule bfly_13
  assign bfly_13$bfly4_t =
	     { x__h16274,
	       x__h16567,
	       x__h16608,
	       x__h16659,
	       x__h16700,
	       x__h16751,
	       x__h16792,
	       x__h16843 } ;
  assign bfly_13$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[895:832] : sReg[895:832] ;

  // submodule bfly_14
  assign bfly_14$bfly4_t =
	     { x__h14071,
	       x__h14364,
	       x__h14405,
	       x__h14456,
	       x__h14497,
	       x__h14548,
	       x__h14589,
	       x__h14640 } ;
  assign bfly_14$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[959:896] : sReg[959:896] ;

  // submodule bfly_15
  assign bfly_15$bfly4_t =
	     { x__h9150,
	       x__h9443,
	       x__h9484,
	       x__h9535,
	       x__h9576,
	       x__h9627,
	       x__h9668,
	       x__h9719 } ;
  assign bfly_15$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[1023:960] : sReg[1023:960] ;

  // submodule bfly_2
  assign bfly_2$bfly4_t =
	     { x__h40507,
	       x__h40800,
	       x__h40841,
	       x__h40892,
	       x__h40933,
	       x__h40984,
	       x__h41025,
	       x__h41076 } ;
  assign bfly_2$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[191:128] : sReg[191:128] ;

  // submodule bfly_3
  assign bfly_3$bfly4_t =
	     { x__h38304,
	       x__h38597,
	       x__h38638,
	       x__h38689,
	       x__h38730,
	       x__h38781,
	       x__h38822,
	       x__h38873 } ;
  assign bfly_3$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[255:192] : sReg[255:192] ;

  // submodule bfly_4
  assign bfly_4$bfly4_t =
	     { x__h36101,
	       x__h36394,
	       x__h36435,
	       x__h36486,
	       x__h36527,
	       x__h36578,
	       x__h36619,
	       x__h36670 } ;
  assign bfly_4$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[319:256] : sReg[319:256] ;

  // submodule bfly_5
  assign bfly_5$bfly4_t =
	     { x__h33898,
	       x__h34191,
	       x__h34232,
	       x__h34283,
	       x__h34324,
	       x__h34375,
	       x__h34416,
	       x__h34467 } ;
  assign bfly_5$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[383:320] : sReg[383:320] ;

  // submodule bfly_6
  assign bfly_6$bfly4_t =
	     { x__h31695,
	       x__h31988,
	       x__h32029,
	       x__h32080,
	       x__h32121,
	       x__h32172,
	       x__h32213,
	       x__h32264 } ;
  assign bfly_6$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[447:384] : sReg[447:384] ;

  // submodule bfly_7
  assign bfly_7$bfly4_t =
	     { x__h29492,
	       x__h29785,
	       x__h29826,
	       x__h29877,
	       x__h29918,
	       x__h29969,
	       x__h30010,
	       x__h30061 } ;
  assign bfly_7$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[511:448] : sReg[511:448] ;

  // submodule bfly_8
  assign bfly_8$bfly4_t =
	     { x__h27289,
	       x__h27582,
	       x__h27623,
	       x__h27674,
	       x__h27715,
	       x__h27766,
	       x__h27807,
	       x__h27858 } ;
  assign bfly_8$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[575:512] : sReg[575:512] ;

  // submodule bfly_9
  assign bfly_9$bfly4_t =
	     { x__h25086,
	       x__h25379,
	       x__h25420,
	       x__h25471,
	       x__h25512,
	       x__h25563,
	       x__h25604,
	       x__h25655 } ;
  assign bfly_9$bfly4_x =
	     (stage == 3'd0) ? inFifo$D_OUT[639:576] : sReg[639:576] ;

  // submodule inFifo
  assign inFifo$D_IN = enq_in ;
  assign inFifo$ENQ = EN_enq ;
  assign inFifo$DEQ = inFifo$EMPTY_N && stage == 3'd0 ;
  assign inFifo$CLR = 1'b0 ;

  // submodule outFifo
  assign outFifo$D_IN =
	     { bfly_15$bfly4[63:48],
	       bfly_15$bfly4[31:16],
	       bfly_14$bfly4[63:48],
	       bfly_14$bfly4[31:16],
	       bfly_13$bfly4[63:48],
	       bfly_13$bfly4[31:16],
	       bfly_12$bfly4[63:48],
	       bfly_12$bfly4[31:16],
	       bfly_11$bfly4[63:48],
	       bfly_11$bfly4[31:16],
	       bfly_10$bfly4[63:48],
	       bfly_10$bfly4[31:16],
	       bfly_9$bfly4[63:48],
	       bfly_9$bfly4[31:16],
	       bfly_8$bfly4[63:48],
	       bfly_8$bfly4[31:16],
	       bfly_7$bfly4[63:48],
	       bfly_7$bfly4[31:16],
	       bfly_6$bfly4[63:48],
	       bfly_6$bfly4[31:16],
	       bfly_5$bfly4[63:48],
	       bfly_5$bfly4[31:16],
	       bfly_4$bfly4[63:48],
	       bfly_4$bfly4[31:16],
	       bfly_3$bfly4[63:48],
	       bfly_3$bfly4[31:16],
	       bfly_2$bfly4[63:48],
	       bfly_2$bfly4[31:16],
	       bfly_1$bfly4[63:48],
	       bfly_1$bfly4[31:16],
	       bfly_0$bfly4[63:48],
	       bfly_0$bfly4[31:16],
	       bfly_15$bfly4[47:32],
	       bfly_15$bfly4[15:0],
	       bfly_14$bfly4[47:32],
	       bfly_14$bfly4[15:0],
	       bfly_13$bfly4[47:32],
	       bfly_13$bfly4[15:0],
	       bfly_12$bfly4[47:32],
	       bfly_12$bfly4[15:0],
	       bfly_11$bfly4[47:32],
	       bfly_11$bfly4[15:0],
	       bfly_10$bfly4[47:32],
	       bfly_10$bfly4[15:0],
	       bfly_9$bfly4[47:32],
	       bfly_9$bfly4[15:0],
	       bfly_8$bfly4[47:32],
	       bfly_8$bfly4[15:0],
	       bfly_7$bfly4[47:32],
	       bfly_7$bfly4[15:0],
	       bfly_6$bfly4[47:32],
	       bfly_6$bfly4[15:0],
	       bfly_5$bfly4[47:32],
	       bfly_5$bfly4[15:0],
	       bfly_4$bfly4[47:32],
	       bfly_4$bfly4[15:0],
	       bfly_3$bfly4[47:32],
	       bfly_3$bfly4[15:0],
	       bfly_2$bfly4[47:32],
	       bfly_2$bfly4[15:0],
	       bfly_1$bfly4[47:32],
	       bfly_1$bfly4[15:0],
	       bfly_0$bfly4[47:32],
	       bfly_0$bfly4[15:0] } ;
  assign outFifo$ENQ = outFifo$FULL_N && inFifo$EMPTY_N && stage == 3'd2 ;
  assign outFifo$DEQ = EN_deq ;
  assign outFifo$CLR = 1'b0 ;

  // remaining internal signals
  assign x__h14071 = 8'd59 / y__h45464 ;
  assign x__h14364 = 8'd59 / y__h45484 ;
  assign x__h14405 = 8'd58 / y__h45464 ;
  assign x__h14456 = 8'd58 / y__h45484 ;
  assign x__h14497 = 8'd57 / y__h45464 ;
  assign x__h14548 = 8'd57 / y__h45484 ;
  assign x__h14589 = 8'd56 / y__h45464 ;
  assign x__h14640 = 8'd56 / y__h45484 ;
  assign x__h16274 = 8'd55 / y__h45464 ;
  assign x__h16567 = 8'd55 / y__h45484 ;
  assign x__h16608 = 8'd54 / y__h45464 ;
  assign x__h16659 = 8'd54 / y__h45484 ;
  assign x__h16700 = 8'd53 / y__h45464 ;
  assign x__h16751 = 8'd53 / y__h45484 ;
  assign x__h16792 = 8'd52 / y__h45464 ;
  assign x__h16843 = 8'd52 / y__h45484 ;
  assign x__h18477 = 8'd51 / y__h45464 ;
  assign x__h18770 = 8'd51 / y__h45484 ;
  assign x__h18811 = 8'd50 / y__h45464 ;
  assign x__h18862 = 8'd50 / y__h45484 ;
  assign x__h18903 = 8'd49 / y__h45464 ;
  assign x__h18954 = 8'd49 / y__h45484 ;
  assign x__h18995 = 8'd48 / y__h45464 ;
  assign x__h19046 = 8'd48 / y__h45484 ;
  assign x__h20680 = 8'd47 / y__h45464 ;
  assign x__h20973 = 8'd47 / y__h45484 ;
  assign x__h21014 = 8'd46 / y__h45464 ;
  assign x__h21065 = 8'd46 / y__h45484 ;
  assign x__h21106 = 8'd45 / y__h45464 ;
  assign x__h21157 = 8'd45 / y__h45484 ;
  assign x__h21198 = 8'd44 / y__h45464 ;
  assign x__h21249 = 8'd44 / y__h45484 ;
  assign x__h22883 = 8'd43 / y__h45464 ;
  assign x__h23176 = 8'd43 / y__h45484 ;
  assign x__h23217 = 8'd42 / y__h45464 ;
  assign x__h23268 = 8'd42 / y__h45484 ;
  assign x__h23309 = 8'd41 / y__h45464 ;
  assign x__h23360 = 8'd41 / y__h45484 ;
  assign x__h23401 = 8'd40 / y__h45464 ;
  assign x__h23452 = 8'd40 / y__h45484 ;
  assign x__h25086 = 8'd39 / y__h45464 ;
  assign x__h25379 = 8'd39 / y__h45484 ;
  assign x__h25420 = 8'd38 / y__h45464 ;
  assign x__h25471 = 8'd38 / y__h45484 ;
  assign x__h25512 = 8'd37 / y__h45464 ;
  assign x__h25563 = 8'd37 / y__h45484 ;
  assign x__h25604 = 8'd36 / y__h45464 ;
  assign x__h25655 = 8'd36 / y__h45484 ;
  assign x__h27289 = 8'd35 / y__h45464 ;
  assign x__h27582 = 8'd35 / y__h45484 ;
  assign x__h27623 = 8'd34 / y__h45464 ;
  assign x__h27674 = 8'd34 / y__h45484 ;
  assign x__h27715 = 8'd33 / y__h45464 ;
  assign x__h27766 = 8'd33 / y__h45484 ;
  assign x__h27807 = 8'd32 / y__h45464 ;
  assign x__h27858 = 8'd32 / y__h45484 ;
  assign x__h29492 = 8'd31 / y__h45464 ;
  assign x__h29785 = 8'd31 / y__h45484 ;
  assign x__h29826 = 8'd30 / y__h45464 ;
  assign x__h29877 = 8'd30 / y__h45484 ;
  assign x__h29918 = 8'd29 / y__h45464 ;
  assign x__h29969 = 8'd29 / y__h45484 ;
  assign x__h30010 = 8'd28 / y__h45464 ;
  assign x__h30061 = 8'd28 / y__h45484 ;
  assign x__h31695 = 8'd27 / y__h45464 ;
  assign x__h31988 = 8'd27 / y__h45484 ;
  assign x__h32029 = 8'd26 / y__h45464 ;
  assign x__h32080 = 8'd26 / y__h45484 ;
  assign x__h32121 = 8'd25 / y__h45464 ;
  assign x__h32172 = 8'd25 / y__h45484 ;
  assign x__h32213 = 8'd24 / y__h45464 ;
  assign x__h32264 = 8'd24 / y__h45484 ;
  assign x__h33898 = 8'd23 / y__h45464 ;
  assign x__h34191 = 8'd23 / y__h45484 ;
  assign x__h34232 = 8'd22 / y__h45464 ;
  assign x__h34283 = 8'd22 / y__h45484 ;
  assign x__h34324 = 8'd21 / y__h45464 ;
  assign x__h34375 = 8'd21 / y__h45484 ;
  assign x__h34416 = 8'd20 / y__h45464 ;
  assign x__h34467 = 8'd20 / y__h45484 ;
  assign x__h36101 = 8'd19 / y__h45464 ;
  assign x__h36394 = 8'd19 / y__h45484 ;
  assign x__h36435 = 8'd18 / y__h45464 ;
  assign x__h36486 = 8'd18 / y__h45484 ;
  assign x__h36527 = 8'd17 / y__h45464 ;
  assign x__h36578 = 8'd17 / y__h45484 ;
  assign x__h36619 = 8'd16 / y__h45464 ;
  assign x__h36670 = 8'd16 / y__h45484 ;
  assign x__h38304 = 8'd15 / y__h45464 ;
  assign x__h38597 = 8'd15 / y__h45484 ;
  assign x__h38638 = 8'd14 / y__h45464 ;
  assign x__h38689 = 8'd14 / y__h45484 ;
  assign x__h38730 = 8'd13 / y__h45464 ;
  assign x__h38781 = 8'd13 / y__h45484 ;
  assign x__h38822 = 8'd12 / y__h45464 ;
  assign x__h38873 = 8'd12 / y__h45484 ;
  assign x__h40507 = 8'd11 / y__h45464 ;
  assign x__h40800 = 8'd11 / y__h45484 ;
  assign x__h40841 = 8'd10 / y__h45464 ;
  assign x__h40892 = 8'd10 / y__h45484 ;
  assign x__h40933 = 8'd9 / y__h45464 ;
  assign x__h40984 = 8'd9 / y__h45484 ;
  assign x__h41025 = 8'd8 / y__h45464 ;
  assign x__h41076 = 8'd8 / y__h45484 ;
  assign x__h42710 = 8'd7 / y__h45464 ;
  assign x__h43003 = 8'd7 / y__h45484 ;
  assign x__h43044 = 8'd6 / y__h45464 ;
  assign x__h43095 = 8'd6 / y__h45484 ;
  assign x__h43136 = 8'd5 / y__h45464 ;
  assign x__h43187 = 8'd5 / y__h45484 ;
  assign x__h43228 = 8'd4 / y__h45464 ;
  assign x__h43279 = 8'd4 / y__h45484 ;
  assign x__h44913 = 8'd3 / y__h45464 ;
  assign x__h45206 = 8'd3 / y__h45484 ;
  assign x__h45247 = 8'd2 / y__h45464 ;
  assign x__h45298 = 8'd2 / y__h45484 ;
  assign x__h45339 = 8'd1 / y__h45464 ;
  assign x__h45390 = 8'd1 / y__h45484 ;
  assign x__h45431 = 8'd0 / y__h45464 ;
  assign x__h45482 = 8'd0 / y__h45484 ;
  assign x__h9150 = 8'd63 / y__h45464 ;
  assign x__h9443 = 8'd63 / y__h45484 ;
  assign x__h9484 = 8'd62 / y__h45464 ;
  assign x__h9535 = 8'd62 / y__h45484 ;
  assign x__h9576 = 8'd61 / y__h45464 ;
  assign x__h9627 = 8'd61 / y__h45484 ;
  assign x__h9668 = 8'd60 / y__h45464 ;
  assign x__h9719 = 8'd60 / y__h45484 ;
  assign y__h45464 = 8'd2 + y__h45471 ;
  assign y__h45471 = { 5'd0, stage } >> 6 ;
  assign y__h45484 = 8'd1 + y__h45471 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        stage <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (stage$EN) stage <= `BSV_ASSIGNMENT_DELAY stage$D_IN;
      end
    if (sReg$EN) sReg <= `BSV_ASSIGNMENT_DELAY sReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    sReg =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFftFolded

